/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/sensor_manager/srv/Sense.srv */
#ifndef SENSOR_MANAGER_SERVICE_SENSE_H
#define SENSOR_MANAGER_SERVICE_SENSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace sensor_manager
{
template <class ContainerAllocator>
struct SenseRequest_ {
  typedef SenseRequest_<ContainerAllocator> Type;

  SenseRequest_()
  : id(0)
  , args()
  {
  }

  SenseRequest_(const ContainerAllocator& _alloc)
  : id(0)
  , args(_alloc)
  {
  }

  typedef uint16_t _id_type;
  uint16_t id;

  typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _args_type;
  std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  args;


  typedef boost::shared_ptr< ::sensor_manager::SenseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_manager::SenseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SenseRequest
typedef  ::sensor_manager::SenseRequest_<std::allocator<void> > SenseRequest;

typedef boost::shared_ptr< ::sensor_manager::SenseRequest> SenseRequestPtr;
typedef boost::shared_ptr< ::sensor_manager::SenseRequest const> SenseRequestConstPtr;


template <class ContainerAllocator>
struct SenseResponse_ {
  typedef SenseResponse_<ContainerAllocator> Type;

  SenseResponse_()
  {
  }

  SenseResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::sensor_manager::SenseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_manager::SenseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SenseResponse
typedef  ::sensor_manager::SenseResponse_<std::allocator<void> > SenseResponse;

typedef boost::shared_ptr< ::sensor_manager::SenseResponse> SenseResponsePtr;
typedef boost::shared_ptr< ::sensor_manager::SenseResponse const> SenseResponseConstPtr;

struct Sense
{

typedef SenseRequest Request;
typedef SenseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Sense
} // namespace sensor_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sensor_manager::SenseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sensor_manager::SenseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sensor_manager::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27de861bbd83c4387cd67c9dc671edee";
  }

  static const char* value(const  ::sensor_manager::SenseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x27de861bbd83c438ULL;
  static const uint64_t static_value2 = 0x7cd67c9dc671edeeULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_manager::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_manager/SenseRequest";
  }

  static const char* value(const  ::sensor_manager::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_manager::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 id\n\
uint16[] args\n\
\n\
";
  }

  static const char* value(const  ::sensor_manager::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sensor_manager::SenseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sensor_manager::SenseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sensor_manager::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::sensor_manager::SenseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_manager::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_manager/SenseResponse";
  }

  static const char* value(const  ::sensor_manager::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_manager::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::sensor_manager::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sensor_manager::SenseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_manager::SenseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.args);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SenseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_manager::SenseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SenseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sensor_manager::Sense> {
  static const char* value() 
  {
    return "27de861bbd83c4387cd67c9dc671edee";
  }

  static const char* value(const sensor_manager::Sense&) { return value(); } 
};

template<>
struct DataType<sensor_manager::Sense> {
  static const char* value() 
  {
    return "sensor_manager/Sense";
  }

  static const char* value(const sensor_manager::Sense&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sensor_manager::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27de861bbd83c4387cd67c9dc671edee";
  }

  static const char* value(const sensor_manager::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sensor_manager::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_manager/Sense";
  }

  static const char* value(const sensor_manager::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sensor_manager::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27de861bbd83c4387cd67c9dc671edee";
  }

  static const char* value(const sensor_manager::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sensor_manager::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_manager/Sense";
  }

  static const char* value(const sensor_manager::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SENSOR_MANAGER_SERVICE_SENSE_H

