/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/action_manager/srv/Commit.srv */
#ifndef ACTION_MANAGER_SERVICE_COMMIT_H
#define ACTION_MANAGER_SERVICE_COMMIT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace action_manager
{
template <class ContainerAllocator>
struct CommitRequest_ {
  typedef CommitRequest_<ContainerAllocator> Type;

  CommitRequest_()
  {
  }

  CommitRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::action_manager::CommitRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_manager::CommitRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CommitRequest
typedef  ::action_manager::CommitRequest_<std::allocator<void> > CommitRequest;

typedef boost::shared_ptr< ::action_manager::CommitRequest> CommitRequestPtr;
typedef boost::shared_ptr< ::action_manager::CommitRequest const> CommitRequestConstPtr;


template <class ContainerAllocator>
struct CommitResponse_ {
  typedef CommitResponse_<ContainerAllocator> Type;

  CommitResponse_()
  {
  }

  CommitResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::action_manager::CommitResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_manager::CommitResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CommitResponse
typedef  ::action_manager::CommitResponse_<std::allocator<void> > CommitResponse;

typedef boost::shared_ptr< ::action_manager::CommitResponse> CommitResponsePtr;
typedef boost::shared_ptr< ::action_manager::CommitResponse const> CommitResponseConstPtr;

struct Commit
{

typedef CommitRequest Request;
typedef CommitResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Commit
} // namespace action_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::action_manager::CommitRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::action_manager::CommitRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::action_manager::CommitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::action_manager::CommitRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::action_manager::CommitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_manager/CommitRequest";
  }

  static const char* value(const  ::action_manager::CommitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::action_manager::CommitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::action_manager::CommitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::action_manager::CommitRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::action_manager::CommitResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::action_manager::CommitResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::action_manager::CommitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::action_manager::CommitResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::action_manager::CommitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_manager/CommitResponse";
  }

  static const char* value(const  ::action_manager::CommitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::action_manager::CommitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::action_manager::CommitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::action_manager::CommitResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::action_manager::CommitRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommitRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::action_manager::CommitResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommitResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<action_manager::Commit> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const action_manager::Commit&) { return value(); } 
};

template<>
struct DataType<action_manager::Commit> {
  static const char* value() 
  {
    return "action_manager/Commit";
  }

  static const char* value(const action_manager::Commit&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<action_manager::CommitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const action_manager::CommitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<action_manager::CommitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_manager/Commit";
  }

  static const char* value(const action_manager::CommitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<action_manager::CommitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const action_manager::CommitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<action_manager::CommitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action_manager/Commit";
  }

  static const char* value(const action_manager::CommitResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ACTION_MANAGER_SERVICE_COMMIT_H

