/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/grasp_planner/srv/PlanGrasp.srv */
#ifndef GRASP_PLANNER_SERVICE_PLANGRASP_H
#define GRASP_PLANNER_SERVICE_PLANGRASP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "arm_navigation_msgs/CollisionObject.h"


#include "sensor_msgs/JointState.h"

namespace grasp_planner
{
template <class ContainerAllocator>
struct PlanGraspRequest_ {
  typedef PlanGraspRequest_<ContainerAllocator> Type;

  PlanGraspRequest_()
  : object()
  , jspace()
  {
  }

  PlanGraspRequest_(const ContainerAllocator& _alloc)
  : object(_alloc)
  , jspace(_alloc)
  {
  }

  typedef  ::arm_navigation_msgs::CollisionObject_<ContainerAllocator>  _object_type;
   ::arm_navigation_msgs::CollisionObject_<ContainerAllocator>  object;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _jspace_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  jspace;


  typedef boost::shared_ptr< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_planner::PlanGraspRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanGraspRequest
typedef  ::grasp_planner::PlanGraspRequest_<std::allocator<void> > PlanGraspRequest;

typedef boost::shared_ptr< ::grasp_planner::PlanGraspRequest> PlanGraspRequestPtr;
typedef boost::shared_ptr< ::grasp_planner::PlanGraspRequest const> PlanGraspRequestConstPtr;


template <class ContainerAllocator>
struct PlanGraspResponse_ {
  typedef PlanGraspResponse_<ContainerAllocator> Type;

  PlanGraspResponse_()
  : grasp_plans()
  , process_cost(0.0)
  {
  }

  PlanGraspResponse_(const ContainerAllocator& _alloc)
  : grasp_plans(_alloc)
  , process_cost(0.0)
  {
  }

  typedef std::vector< ::sensor_msgs::JointState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::JointState_<ContainerAllocator> >::other >  _grasp_plans_type;
  std::vector< ::sensor_msgs::JointState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::JointState_<ContainerAllocator> >::other >  grasp_plans;

  typedef double _process_cost_type;
  double process_cost;


  typedef boost::shared_ptr< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_planner::PlanGraspResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanGraspResponse
typedef  ::grasp_planner::PlanGraspResponse_<std::allocator<void> > PlanGraspResponse;

typedef boost::shared_ptr< ::grasp_planner::PlanGraspResponse> PlanGraspResponsePtr;
typedef boost::shared_ptr< ::grasp_planner::PlanGraspResponse const> PlanGraspResponseConstPtr;

struct PlanGrasp
{

typedef PlanGraspRequest Request;
typedef PlanGraspResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PlanGrasp
} // namespace grasp_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::grasp_planner::PlanGraspRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "54df94bfc96cf22a032153787903e218";
  }

  static const char* value(const  ::grasp_planner::PlanGraspRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x54df94bfc96cf22aULL;
  static const uint64_t static_value2 = 0x032153787903e218ULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "grasp_planner/PlanGraspRequest";
  }

  static const char* value(const  ::grasp_planner::PlanGraspRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
arm_navigation_msgs/CollisionObject object\n\
string jspace\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObject\n\
# a header, used for interpreting the poses\n\
Header header\n\
\n\
# the id of the object\n\
string id\n\
\n\
# The padding used for filtering points near the object.\n\
# This does not affect collision checking for the object.  \n\
# Set to negative to get zero padding.\n\
float32 padding\n\
\n\
#This contains what is to be done with the object\n\
CollisionObjectOperation operation\n\
\n\
#the shapes associated with the object\n\
arm_navigation_msgs/Shape[] shapes\n\
\n\
#the poses associated with the shapes - will be transformed using the header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObjectOperation\n\
#Puts the object into the environment\n\
#or updates the object if already added\n\
byte ADD=0\n\
\n\
#Removes the object from the environment entirely\n\
byte REMOVE=1\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes an attached object, detaches from the attached link\n\
#But adds back in as regular object\n\
byte DETACH_AND_ADD_AS_OBJECT=2\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes current object in the environment and removes it as\n\
#a regular object\n\
byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
\n\
# Byte code for operation\n\
byte operation\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::grasp_planner::PlanGraspRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::grasp_planner::PlanGraspResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "876a61d0cfffe1ff7620a83ec0d4c9ed";
  }

  static const char* value(const  ::grasp_planner::PlanGraspResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x876a61d0cfffe1ffULL;
  static const uint64_t static_value2 = 0x7620a83ec0d4c9edULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "grasp_planner/PlanGraspResponse";
  }

  static const char* value(const  ::grasp_planner::PlanGraspResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
sensor_msgs/JointState[] grasp_plans\n\
float64 process_cost\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::grasp_planner::PlanGraspResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::grasp_planner::PlanGraspRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object);
    stream.next(m.jspace);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanGraspRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::grasp_planner::PlanGraspResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.grasp_plans);
    stream.next(m.process_cost);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanGraspResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<grasp_planner::PlanGrasp> {
  static const char* value() 
  {
    return "baedc1f1c41f8bb1d906ca306945570f";
  }

  static const char* value(const grasp_planner::PlanGrasp&) { return value(); } 
};

template<>
struct DataType<grasp_planner::PlanGrasp> {
  static const char* value() 
  {
    return "grasp_planner/PlanGrasp";
  }

  static const char* value(const grasp_planner::PlanGrasp&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<grasp_planner::PlanGraspRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "baedc1f1c41f8bb1d906ca306945570f";
  }

  static const char* value(const grasp_planner::PlanGraspRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<grasp_planner::PlanGraspRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "grasp_planner/PlanGrasp";
  }

  static const char* value(const grasp_planner::PlanGraspRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<grasp_planner::PlanGraspResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "baedc1f1c41f8bb1d906ca306945570f";
  }

  static const char* value(const grasp_planner::PlanGraspResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<grasp_planner::PlanGraspResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "grasp_planner/PlanGrasp";
  }

  static const char* value(const grasp_planner::PlanGraspResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GRASP_PLANNER_SERVICE_PLANGRASP_H

