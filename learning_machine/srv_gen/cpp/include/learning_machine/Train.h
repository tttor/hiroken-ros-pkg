/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/learning_machine/srv/Train.srv */
#ifndef LEARNING_MACHINE_SERVICE_TRAIN_H
#define LEARNING_MACHINE_SERVICE_TRAIN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace learning_machine
{
template <class ContainerAllocator>
struct TrainRequest_ {
  typedef TrainRequest_<ContainerAllocator> Type;

  TrainRequest_()
  : tmm_paths()
  {
  }

  TrainRequest_(const ContainerAllocator& _alloc)
  : tmm_paths(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _tmm_paths_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  tmm_paths;


  typedef boost::shared_ptr< ::learning_machine::TrainRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::TrainRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrainRequest
typedef  ::learning_machine::TrainRequest_<std::allocator<void> > TrainRequest;

typedef boost::shared_ptr< ::learning_machine::TrainRequest> TrainRequestPtr;
typedef boost::shared_ptr< ::learning_machine::TrainRequest const> TrainRequestConstPtr;


template <class ContainerAllocator>
struct TrainResponse_ {
  typedef TrainResponse_<ContainerAllocator> Type;

  TrainResponse_()
  {
  }

  TrainResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::learning_machine::TrainResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::TrainResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrainResponse
typedef  ::learning_machine::TrainResponse_<std::allocator<void> > TrainResponse;

typedef boost::shared_ptr< ::learning_machine::TrainResponse> TrainResponsePtr;
typedef boost::shared_ptr< ::learning_machine::TrainResponse const> TrainResponseConstPtr;

struct Train
{

typedef TrainRequest Request;
typedef TrainResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Train
} // namespace learning_machine

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TrainRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TrainRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::TrainRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4e82f149495f2916fe2470fb0fe41f8";
  }

  static const char* value(const  ::learning_machine::TrainRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa4e82f149495f291ULL;
  static const uint64_t static_value2 = 0x6fe2470fb0fe41f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::TrainRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/TrainRequest";
  }

  static const char* value(const  ::learning_machine::TrainRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::TrainRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] tmm_paths\n\
\n\
";
  }

  static const char* value(const  ::learning_machine::TrainRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TrainResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TrainResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::TrainResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::learning_machine::TrainResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::TrainResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/TrainResponse";
  }

  static const char* value(const  ::learning_machine::TrainResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::TrainResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::learning_machine::TrainResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::learning_machine::TrainResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::TrainRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tmm_paths);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrainRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::TrainResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrainResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<learning_machine::Train> {
  static const char* value() 
  {
    return "a4e82f149495f2916fe2470fb0fe41f8";
  }

  static const char* value(const learning_machine::Train&) { return value(); } 
};

template<>
struct DataType<learning_machine::Train> {
  static const char* value() 
  {
    return "learning_machine/Train";
  }

  static const char* value(const learning_machine::Train&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::TrainRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4e82f149495f2916fe2470fb0fe41f8";
  }

  static const char* value(const learning_machine::TrainRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::TrainRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/Train";
  }

  static const char* value(const learning_machine::TrainRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::TrainResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4e82f149495f2916fe2470fb0fe41f8";
  }

  static const char* value(const learning_machine::TrainResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::TrainResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/Train";
  }

  static const char* value(const learning_machine::TrainResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LEARNING_MACHINE_SERVICE_TRAIN_H

