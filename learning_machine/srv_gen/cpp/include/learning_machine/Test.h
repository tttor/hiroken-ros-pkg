/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/learning_machine/srv/Test.srv */
#ifndef LEARNING_MACHINE_SERVICE_TEST_H
#define LEARNING_MACHINE_SERVICE_TEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace learning_machine
{
template <class ContainerAllocator>
struct TestRequest_ {
  typedef TestRequest_<ContainerAllocator> Type;

  TestRequest_()
  {
  }

  TestRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::learning_machine::TestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::TestRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestRequest
typedef  ::learning_machine::TestRequest_<std::allocator<void> > TestRequest;

typedef boost::shared_ptr< ::learning_machine::TestRequest> TestRequestPtr;
typedef boost::shared_ptr< ::learning_machine::TestRequest const> TestRequestConstPtr;


template <class ContainerAllocator>
struct TestResponse_ {
  typedef TestResponse_<ContainerAllocator> Type;

  TestResponse_()
  {
  }

  TestResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::learning_machine::TestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::TestResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestResponse
typedef  ::learning_machine::TestResponse_<std::allocator<void> > TestResponse;

typedef boost::shared_ptr< ::learning_machine::TestResponse> TestResponsePtr;
typedef boost::shared_ptr< ::learning_machine::TestResponse const> TestResponseConstPtr;

struct Test
{

typedef TestRequest Request;
typedef TestResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Test
} // namespace learning_machine

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TestRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TestRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::learning_machine::TestRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/TestRequest";
  }

  static const char* value(const  ::learning_machine::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::learning_machine::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::learning_machine::TestRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TestResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::TestResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::learning_machine::TestResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/TestResponse";
  }

  static const char* value(const  ::learning_machine::TestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::learning_machine::TestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::learning_machine::TestResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::TestRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::TestResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<learning_machine::Test> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const learning_machine::Test&) { return value(); } 
};

template<>
struct DataType<learning_machine::Test> {
  static const char* value() 
  {
    return "learning_machine/Test";
  }

  static const char* value(const learning_machine::Test&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const learning_machine::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::TestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/Test";
  }

  static const char* value(const learning_machine::TestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const learning_machine::TestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::TestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/Test";
  }

  static const char* value(const learning_machine::TestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LEARNING_MACHINE_SERVICE_TEST_H

