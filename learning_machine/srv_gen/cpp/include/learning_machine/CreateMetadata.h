/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/learning_machine/srv/CreateMetadata.srv */
#ifndef LEARNING_MACHINE_SERVICE_CREATEMETADATA_H
#define LEARNING_MACHINE_SERVICE_CREATEMETADATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace learning_machine
{
template <class ContainerAllocator>
struct CreateMetadataRequest_ {
  typedef CreateMetadataRequest_<ContainerAllocator> Type;

  CreateMetadataRequest_()
  : n_obj(0)
  {
  }

  CreateMetadataRequest_(const ContainerAllocator& _alloc)
  : n_obj(0)
  {
  }

  typedef uint16_t _n_obj_type;
  uint16_t n_obj;


  typedef boost::shared_ptr< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::CreateMetadataRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CreateMetadataRequest
typedef  ::learning_machine::CreateMetadataRequest_<std::allocator<void> > CreateMetadataRequest;

typedef boost::shared_ptr< ::learning_machine::CreateMetadataRequest> CreateMetadataRequestPtr;
typedef boost::shared_ptr< ::learning_machine::CreateMetadataRequest const> CreateMetadataRequestConstPtr;


template <class ContainerAllocator>
struct CreateMetadataResponse_ {
  typedef CreateMetadataResponse_<ContainerAllocator> Type;

  CreateMetadataResponse_()
  : msg()
  {
  }

  CreateMetadataResponse_(const ContainerAllocator& _alloc)
  : msg(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_machine::CreateMetadataResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CreateMetadataResponse
typedef  ::learning_machine::CreateMetadataResponse_<std::allocator<void> > CreateMetadataResponse;

typedef boost::shared_ptr< ::learning_machine::CreateMetadataResponse> CreateMetadataResponsePtr;
typedef boost::shared_ptr< ::learning_machine::CreateMetadataResponse const> CreateMetadataResponseConstPtr;

struct CreateMetadata
{

typedef CreateMetadataRequest Request;
typedef CreateMetadataResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CreateMetadata
} // namespace learning_machine

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::CreateMetadataRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0330c91bad4c26770e53bb95e8789559";
  }

  static const char* value(const  ::learning_machine::CreateMetadataRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0330c91bad4c2677ULL;
  static const uint64_t static_value2 = 0x0e53bb95e8789559ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/CreateMetadataRequest";
  }

  static const char* value(const  ::learning_machine::CreateMetadataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 n_obj\n\
\n\
";
  }

  static const char* value(const  ::learning_machine::CreateMetadataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::learning_machine::CreateMetadataResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const  ::learning_machine::CreateMetadataResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d96ed7307768047ULL;
  static const uint64_t static_value2 = 0x54140b85e64c862eULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/CreateMetadataResponse";
  }

  static const char* value(const  ::learning_machine::CreateMetadataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::learning_machine::CreateMetadataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::CreateMetadataRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.n_obj);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CreateMetadataRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::learning_machine::CreateMetadataResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CreateMetadataResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<learning_machine::CreateMetadata> {
  static const char* value() 
  {
    return "220592dc9786e0034a883b2dab270692";
  }

  static const char* value(const learning_machine::CreateMetadata&) { return value(); } 
};

template<>
struct DataType<learning_machine::CreateMetadata> {
  static const char* value() 
  {
    return "learning_machine/CreateMetadata";
  }

  static const char* value(const learning_machine::CreateMetadata&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::CreateMetadataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "220592dc9786e0034a883b2dab270692";
  }

  static const char* value(const learning_machine::CreateMetadataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::CreateMetadataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/CreateMetadata";
  }

  static const char* value(const learning_machine::CreateMetadataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<learning_machine::CreateMetadataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "220592dc9786e0034a883b2dab270692";
  }

  static const char* value(const learning_machine::CreateMetadataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<learning_machine::CreateMetadataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "learning_machine/CreateMetadata";
  }

  static const char* value(const learning_machine::CreateMetadataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LEARNING_MACHINE_SERVICE_CREATEMETADATA_H

