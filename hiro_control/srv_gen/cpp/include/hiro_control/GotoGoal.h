/* Auto-generated by genmsg_cpp for file /home/vektor/4/ros-pkg/hiro_control/srv/GotoGoal.srv */
#ifndef HIRO_CONTROL_SERVICE_GOTOGOAL_H
#define HIRO_CONTROL_SERVICE_GOTOGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hiro_control
{
template <class ContainerAllocator>
struct GotoGoalRequest_ {
  typedef GotoGoalRequest_<ContainerAllocator> Type;

  GotoGoalRequest_()
  {
  }

  GotoGoalRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::GotoGoalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GotoGoalRequest
typedef  ::hiro_control::GotoGoalRequest_<std::allocator<void> > GotoGoalRequest;

typedef boost::shared_ptr< ::hiro_control::GotoGoalRequest> GotoGoalRequestPtr;
typedef boost::shared_ptr< ::hiro_control::GotoGoalRequest const> GotoGoalRequestConstPtr;


template <class ContainerAllocator>
struct GotoGoalResponse_ {
  typedef GotoGoalResponse_<ContainerAllocator> Type;

  GotoGoalResponse_()
  : status()
  {
  }

  GotoGoalResponse_(const ContainerAllocator& _alloc)
  : status(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;


  typedef boost::shared_ptr< ::hiro_control::GotoGoalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::GotoGoalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GotoGoalResponse
typedef  ::hiro_control::GotoGoalResponse_<std::allocator<void> > GotoGoalResponse;

typedef boost::shared_ptr< ::hiro_control::GotoGoalResponse> GotoGoalResponsePtr;
typedef boost::shared_ptr< ::hiro_control::GotoGoalResponse const> GotoGoalResponseConstPtr;

struct GotoGoal
{

typedef GotoGoalRequest Request;
typedef GotoGoalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GotoGoal
} // namespace hiro_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::GotoGoalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::hiro_control::GotoGoalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/GotoGoalRequest";
  }

  static const char* value(const  ::hiro_control::GotoGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::hiro_control::GotoGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_control::GotoGoalRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::GotoGoalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::GotoGoalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::GotoGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const  ::hiro_control::GotoGoalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4fe5af303955c287ULL;
  static const uint64_t static_value2 = 0x688e7347e9b00278ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::GotoGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/GotoGoalResponse";
  }

  static const char* value(const  ::hiro_control::GotoGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::GotoGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_control::GotoGoalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::GotoGoalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GotoGoalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::GotoGoalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GotoGoalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_control::GotoGoal> {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const hiro_control::GotoGoal&) { return value(); } 
};

template<>
struct DataType<hiro_control::GotoGoal> {
  static const char* value() 
  {
    return "hiro_control/GotoGoal";
  }

  static const char* value(const hiro_control::GotoGoal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::GotoGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const hiro_control::GotoGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::GotoGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/GotoGoal";
  }

  static const char* value(const hiro_control::GotoGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::GotoGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const hiro_control::GotoGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::GotoGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/GotoGoal";
  }

  static const char* value(const hiro_control::GotoGoalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_CONTROL_SERVICE_GOTOGOAL_H

