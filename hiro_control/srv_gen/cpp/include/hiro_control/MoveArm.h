/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/hiro_control/srv/MoveArm.srv */
#ifndef HIRO_CONTROL_SERVICE_MOVEARM_H
#define HIRO_CONTROL_SERVICE_MOVEARM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "trajectory_msgs/JointTrajectory.h"



namespace hiro_control
{
template <class ContainerAllocator>
struct MoveArmRequest_ {
  typedef MoveArmRequest_<ContainerAllocator> Type;

  MoveArmRequest_()
  : trajectory()
  {
  }

  MoveArmRequest_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
   ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  trajectory;


  typedef boost::shared_ptr< ::hiro_control::MoveArmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::MoveArmRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveArmRequest
typedef  ::hiro_control::MoveArmRequest_<std::allocator<void> > MoveArmRequest;

typedef boost::shared_ptr< ::hiro_control::MoveArmRequest> MoveArmRequestPtr;
typedef boost::shared_ptr< ::hiro_control::MoveArmRequest const> MoveArmRequestConstPtr;


template <class ContainerAllocator>
struct MoveArmResponse_ {
  typedef MoveArmResponse_<ContainerAllocator> Type;

  MoveArmResponse_()
  : successful(false)
  {
  }

  MoveArmResponse_(const ContainerAllocator& _alloc)
  : successful(false)
  {
  }

  typedef uint8_t _successful_type;
  uint8_t successful;


  typedef boost::shared_ptr< ::hiro_control::MoveArmResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::MoveArmResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveArmResponse
typedef  ::hiro_control::MoveArmResponse_<std::allocator<void> > MoveArmResponse;

typedef boost::shared_ptr< ::hiro_control::MoveArmResponse> MoveArmResponsePtr;
typedef boost::shared_ptr< ::hiro_control::MoveArmResponse const> MoveArmResponseConstPtr;

struct MoveArm
{

typedef MoveArmRequest Request;
typedef MoveArmResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveArm
} // namespace hiro_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::MoveArmRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::MoveArmRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::MoveArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48a668811b715b51af6b3383511ae27f";
  }

  static const char* value(const  ::hiro_control::MoveArmRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x48a668811b715b51ULL;
  static const uint64_t static_value2 = 0xaf6b3383511ae27fULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::MoveArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/MoveArmRequest";
  }

  static const char* value(const  ::hiro_control::MoveArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::MoveArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::hiro_control::MoveArmRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::MoveArmResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::MoveArmResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::MoveArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ccdb752b565be6d250259ff3d0c7ea1";
  }

  static const char* value(const  ::hiro_control::MoveArmResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ccdb752b565be6dULL;
  static const uint64_t static_value2 = 0x250259ff3d0c7ea1ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::MoveArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/MoveArmResponse";
  }

  static const char* value(const  ::hiro_control::MoveArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::MoveArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool successful\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_control::MoveArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_control::MoveArmResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::MoveArmRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveArmRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::MoveArmResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.successful);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveArmResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_control::MoveArm> {
  static const char* value() 
  {
    return "874d1766247c2b01a9a335bc13e0897e";
  }

  static const char* value(const hiro_control::MoveArm&) { return value(); } 
};

template<>
struct DataType<hiro_control::MoveArm> {
  static const char* value() 
  {
    return "hiro_control/MoveArm";
  }

  static const char* value(const hiro_control::MoveArm&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::MoveArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "874d1766247c2b01a9a335bc13e0897e";
  }

  static const char* value(const hiro_control::MoveArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::MoveArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/MoveArm";
  }

  static const char* value(const hiro_control::MoveArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::MoveArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "874d1766247c2b01a9a335bc13e0897e";
  }

  static const char* value(const hiro_control::MoveArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::MoveArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/MoveArm";
  }

  static const char* value(const hiro_control::MoveArmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_CONTROL_SERVICE_MOVEARM_H

