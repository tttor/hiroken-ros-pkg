/* Auto-generated by genmsg_cpp for file /home/vektor/4/ros-pkg/hiro_control/srv/ControlArm.srv */
#ifndef HIRO_CONTROL_SERVICE_CONTROLARM_H
#define HIRO_CONTROL_SERVICE_CONTROLARM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "trajectory_msgs/JointTrajectoryPoint.h"


#include "trajectory_msgs/JointTrajectoryPoint.h"

namespace hiro_control
{
template <class ContainerAllocator>
struct ControlArmRequest_ {
  typedef ControlArmRequest_<ContainerAllocator> Type;

  ControlArmRequest_()
  : desired()
  {
  }

  ControlArmRequest_(const ContainerAllocator& _alloc)
  : desired(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _desired_type;
   ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  desired;


  typedef boost::shared_ptr< ::hiro_control::ControlArmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::ControlArmRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlArmRequest
typedef  ::hiro_control::ControlArmRequest_<std::allocator<void> > ControlArmRequest;

typedef boost::shared_ptr< ::hiro_control::ControlArmRequest> ControlArmRequestPtr;
typedef boost::shared_ptr< ::hiro_control::ControlArmRequest const> ControlArmRequestConstPtr;


template <class ContainerAllocator>
struct ControlArmResponse_ {
  typedef ControlArmResponse_<ContainerAllocator> Type;

  ControlArmResponse_()
  : actual()
  {
  }

  ControlArmResponse_(const ContainerAllocator& _alloc)
  : actual(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _actual_type;
   ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  actual;


  typedef boost::shared_ptr< ::hiro_control::ControlArmResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::ControlArmResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlArmResponse
typedef  ::hiro_control::ControlArmResponse_<std::allocator<void> > ControlArmResponse;

typedef boost::shared_ptr< ::hiro_control::ControlArmResponse> ControlArmResponsePtr;
typedef boost::shared_ptr< ::hiro_control::ControlArmResponse const> ControlArmResponseConstPtr;

struct ControlArm
{

typedef ControlArmRequest Request;
typedef ControlArmResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ControlArm
} // namespace hiro_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlArmRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlArmRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::ControlArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "609873f371d438b10fca1b48cae15e20";
  }

  static const char* value(const  ::hiro_control::ControlArmRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x609873f371d438b1ULL;
  static const uint64_t static_value2 = 0x0fca1b48cae15e20ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::ControlArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlArmRequest";
  }

  static const char* value(const  ::hiro_control::ControlArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::ControlArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
trajectory_msgs/JointTrajectoryPoint desired\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::hiro_control::ControlArmRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlArmResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlArmResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::ControlArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfaa47dd1be103b7eb8442649dc4dc8c";
  }

  static const char* value(const  ::hiro_control::ControlArmResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbfaa47dd1be103b7ULL;
  static const uint64_t static_value2 = 0xeb8442649dc4dc8cULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::ControlArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlArmResponse";
  }

  static const char* value(const  ::hiro_control::ControlArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::ControlArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
trajectory_msgs/JointTrajectoryPoint actual\n\
\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::hiro_control::ControlArmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::ControlArmRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.desired);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlArmRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::ControlArmResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.actual);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlArmResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_control::ControlArm> {
  static const char* value() 
  {
    return "58875e2aaba0886d8df9015de4efb1ec";
  }

  static const char* value(const hiro_control::ControlArm&) { return value(); } 
};

template<>
struct DataType<hiro_control::ControlArm> {
  static const char* value() 
  {
    return "hiro_control/ControlArm";
  }

  static const char* value(const hiro_control::ControlArm&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::ControlArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58875e2aaba0886d8df9015de4efb1ec";
  }

  static const char* value(const hiro_control::ControlArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::ControlArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlArm";
  }

  static const char* value(const hiro_control::ControlArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::ControlArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58875e2aaba0886d8df9015de4efb1ec";
  }

  static const char* value(const hiro_control::ControlArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::ControlArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlArm";
  }

  static const char* value(const hiro_control::ControlArmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_CONTROL_SERVICE_CONTROLARM_H

