/* Auto-generated by genmsg_cpp for file /home/vektor/4/ros-pkg/hiro_control/srv/ControlHand.srv */
#ifndef HIRO_CONTROL_SERVICE_CONTROLHAND_H
#define HIRO_CONTROL_SERVICE_CONTROLHAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hiro_control
{
template <class ContainerAllocator>
struct ControlHandRequest_ {
  typedef ControlHandRequest_<ContainerAllocator> Type;

  ControlHandRequest_()
  : cmd(0)
  {
  }

  ControlHandRequest_(const ContainerAllocator& _alloc)
  : cmd(0)
  {
  }

  typedef uint8_t _cmd_type;
  uint8_t cmd;


  typedef boost::shared_ptr< ::hiro_control::ControlHandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::ControlHandRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlHandRequest
typedef  ::hiro_control::ControlHandRequest_<std::allocator<void> > ControlHandRequest;

typedef boost::shared_ptr< ::hiro_control::ControlHandRequest> ControlHandRequestPtr;
typedef boost::shared_ptr< ::hiro_control::ControlHandRequest const> ControlHandRequestConstPtr;


template <class ContainerAllocator>
struct ControlHandResponse_ {
  typedef ControlHandResponse_<ContainerAllocator> Type;

  ControlHandResponse_()
  : msg()
  {
  }

  ControlHandResponse_(const ContainerAllocator& _alloc)
  : msg(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hiro_control::ControlHandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_control::ControlHandResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlHandResponse
typedef  ::hiro_control::ControlHandResponse_<std::allocator<void> > ControlHandResponse;

typedef boost::shared_ptr< ::hiro_control::ControlHandResponse> ControlHandResponsePtr;
typedef boost::shared_ptr< ::hiro_control::ControlHandResponse const> ControlHandResponseConstPtr;

struct ControlHand
{

typedef ControlHandRequest Request;
typedef ControlHandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ControlHand
} // namespace hiro_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlHandRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlHandRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::ControlHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "26f05c6e9fb9de81f12f2b92304c2961";
  }

  static const char* value(const  ::hiro_control::ControlHandRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x26f05c6e9fb9de81ULL;
  static const uint64_t static_value2 = 0xf12f2b92304c2961ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::ControlHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlHandRequest";
  }

  static const char* value(const  ::hiro_control::ControlHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::ControlHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 cmd\n\
\n\
";
  }

  static const char* value(const  ::hiro_control::ControlHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_control::ControlHandRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlHandResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_control::ControlHandResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_control::ControlHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const  ::hiro_control::ControlHandResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d96ed7307768047ULL;
  static const uint64_t static_value2 = 0x54140b85e64c862eULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_control::ControlHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlHandResponse";
  }

  static const char* value(const  ::hiro_control::ControlHandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_control::ControlHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_control::ControlHandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::ControlHandRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlHandRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_control::ControlHandResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlHandResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_control::ControlHand> {
  static const char* value() 
  {
    return "e652cc4a461c3bb431c9317bbc33fd57";
  }

  static const char* value(const hiro_control::ControlHand&) { return value(); } 
};

template<>
struct DataType<hiro_control::ControlHand> {
  static const char* value() 
  {
    return "hiro_control/ControlHand";
  }

  static const char* value(const hiro_control::ControlHand&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::ControlHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e652cc4a461c3bb431c9317bbc33fd57";
  }

  static const char* value(const hiro_control::ControlHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::ControlHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlHand";
  }

  static const char* value(const hiro_control::ControlHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_control::ControlHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e652cc4a461c3bb431c9317bbc33fd57";
  }

  static const char* value(const hiro_control::ControlHandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_control::ControlHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_control/ControlHand";
  }

  static const char* value(const hiro_control::ControlHandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_CONTROL_SERVICE_CONTROLHAND_H

