# Python stubs generated by omniidl from ../corba/vnet3Finger.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "VnetHand"
#
__name__ = "VnetHand"
_0_VnetHand = omniORB.openModule("VnetHand", r"../corba/vnet3Finger.idl")
_0_VnetHand__POA = omniORB.openModule("VnetHand__POA", r"../corba/vnet3Finger.idl")

_0_VnetHand.MAX_HAND_NUM = 2
_0_VnetHand.MAX_JOINT_NUM = 6

# typedef ... ServoFeedback
class ServoFeedback:
    _NP_RepositoryId = "IDL:VnetHand/ServoFeedback:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_VnetHand.ServoFeedback = ServoFeedback
_0_VnetHand._d_ServoFeedback  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3)
_0_VnetHand._ad_ServoFeedback = (omniORB.tcInternal.tv_alias, ServoFeedback._NP_RepositoryId, "ServoFeedback", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3))
_0_VnetHand._tc_ServoFeedback = omniORB.tcInternal.createTypeCode(_0_VnetHand._ad_ServoFeedback)
omniORB.registerType(ServoFeedback._NP_RepositoryId, _0_VnetHand._ad_ServoFeedback, _0_VnetHand._tc_ServoFeedback)
del ServoFeedback

# typedef ... JointAngles
class JointAngles:
    _NP_RepositoryId = "IDL:VnetHand/JointAngles:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_VnetHand.JointAngles = JointAngles
_0_VnetHand._d_JointAngles  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 6)
_0_VnetHand._ad_JointAngles = (omniORB.tcInternal.tv_alias, JointAngles._NP_RepositoryId, "JointAngles", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 6))
_0_VnetHand._tc_JointAngles = omniORB.tcInternal.createTypeCode(_0_VnetHand._ad_JointAngles)
omniORB.registerType(JointAngles._NP_RepositoryId, _0_VnetHand._ad_JointAngles, _0_VnetHand._tc_JointAngles)
del JointAngles

# interface vnet3Finger
_0_VnetHand._d_vnet3Finger = (omniORB.tcInternal.tv_objref, "IDL:VnetHand/vnet3Finger:1.0", "vnet3Finger")
omniORB.typeMapping["IDL:VnetHand/vnet3Finger:1.0"] = _0_VnetHand._d_vnet3Finger
_0_VnetHand.vnet3Finger = omniORB.newEmptyClass()
class vnet3Finger :
    _NP_RepositoryId = _0_VnetHand._d_vnet3Finger[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_VnetHand.vnet3Finger = vnet3Finger
_0_VnetHand._tc_vnet3Finger = omniORB.tcInternal.createTypeCode(_0_VnetHand._d_vnet3Finger)
omniORB.registerType(vnet3Finger._NP_RepositoryId, _0_VnetHand._d_vnet3Finger, _0_VnetHand._tc_vnet3Finger)

# vnet3Finger operations and attributes
vnet3Finger._d_handInit = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_read = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_octet), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_long), None)
vnet3Finger._d_write = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_octet, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_calibration = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_stat = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:VnetHand/ServoFeedback:1.0"]), None)
vnet3Finger._d_jointAngle = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_jointAngleAll = ((omniORB.tcInternal.tv_short, omniORB.typeMapping["IDL:VnetHand/JointAngles:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_servo = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_servoAll = ((omniORB.tcInternal.tv_short, omniORB.typeMapping["IDL:VnetHand/JointAngles:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_goInitial = ((omniORB.tcInternal.tv_short, ), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_servoSwitch = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_softlimitSwitch = ((omniORB.tcInternal.tv_short, omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_parameterSave = ((omniORB.tcInternal.tv_short, ), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_getCalibState = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_getCalibStateAll = ((omniORB.tcInternal.tv_short, ), (omniORB.tcInternal.tv_boolean, ), None)
vnet3Finger._d_clearCanBuffer = ((omniORB.tcInternal.tv_short, ), (), None)

# vnet3Finger object reference
class _objref_vnet3Finger (CORBA.Object):
    _NP_RepositoryId = vnet3Finger._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def handInit(self, *args):
        return _omnipy.invoke(self, "handInit", _0_VnetHand.vnet3Finger._d_handInit, args)

    def read(self, *args):
        return _omnipy.invoke(self, "read", _0_VnetHand.vnet3Finger._d_read, args)

    def write(self, *args):
        return _omnipy.invoke(self, "write", _0_VnetHand.vnet3Finger._d_write, args)

    def calibration(self, *args):
        return _omnipy.invoke(self, "calibration", _0_VnetHand.vnet3Finger._d_calibration, args)

    def stat(self, *args):
        return _omnipy.invoke(self, "stat", _0_VnetHand.vnet3Finger._d_stat, args)

    def jointAngle(self, *args):
        return _omnipy.invoke(self, "jointAngle", _0_VnetHand.vnet3Finger._d_jointAngle, args)

    def jointAngleAll(self, *args):
        return _omnipy.invoke(self, "jointAngleAll", _0_VnetHand.vnet3Finger._d_jointAngleAll, args)

    def servo(self, *args):
        return _omnipy.invoke(self, "servo", _0_VnetHand.vnet3Finger._d_servo, args)

    def servoAll(self, *args):
        return _omnipy.invoke(self, "servoAll", _0_VnetHand.vnet3Finger._d_servoAll, args)

    def goInitial(self, *args):
        return _omnipy.invoke(self, "goInitial", _0_VnetHand.vnet3Finger._d_goInitial, args)

    def servoSwitch(self, *args):
        return _omnipy.invoke(self, "servoSwitch", _0_VnetHand.vnet3Finger._d_servoSwitch, args)

    def softlimitSwitch(self, *args):
        return _omnipy.invoke(self, "softlimitSwitch", _0_VnetHand.vnet3Finger._d_softlimitSwitch, args)

    def parameterSave(self, *args):
        return _omnipy.invoke(self, "parameterSave", _0_VnetHand.vnet3Finger._d_parameterSave, args)

    def getCalibState(self, *args):
        return _omnipy.invoke(self, "getCalibState", _0_VnetHand.vnet3Finger._d_getCalibState, args)

    def getCalibStateAll(self, *args):
        return _omnipy.invoke(self, "getCalibStateAll", _0_VnetHand.vnet3Finger._d_getCalibStateAll, args)

    def clearCanBuffer(self, *args):
        return _omnipy.invoke(self, "clearCanBuffer", _0_VnetHand.vnet3Finger._d_clearCanBuffer, args)

    __methods__ = ["handInit", "read", "write", "calibration", "stat", "jointAngle", "jointAngleAll", "servo", "servoAll", "goInitial", "servoSwitch", "softlimitSwitch", "parameterSave", "getCalibState", "getCalibStateAll", "clearCanBuffer"] + CORBA.Object.__methods__

omniORB.registerObjref(vnet3Finger._NP_RepositoryId, _objref_vnet3Finger)
_0_VnetHand._objref_vnet3Finger = _objref_vnet3Finger
del vnet3Finger, _objref_vnet3Finger

# vnet3Finger skeleton
__name__ = "VnetHand__POA"
class vnet3Finger (PortableServer.Servant):
    _NP_RepositoryId = _0_VnetHand.vnet3Finger._NP_RepositoryId


    _omni_op_d = {"handInit": _0_VnetHand.vnet3Finger._d_handInit, "read": _0_VnetHand.vnet3Finger._d_read, "write": _0_VnetHand.vnet3Finger._d_write, "calibration": _0_VnetHand.vnet3Finger._d_calibration, "stat": _0_VnetHand.vnet3Finger._d_stat, "jointAngle": _0_VnetHand.vnet3Finger._d_jointAngle, "jointAngleAll": _0_VnetHand.vnet3Finger._d_jointAngleAll, "servo": _0_VnetHand.vnet3Finger._d_servo, "servoAll": _0_VnetHand.vnet3Finger._d_servoAll, "goInitial": _0_VnetHand.vnet3Finger._d_goInitial, "servoSwitch": _0_VnetHand.vnet3Finger._d_servoSwitch, "softlimitSwitch": _0_VnetHand.vnet3Finger._d_softlimitSwitch, "parameterSave": _0_VnetHand.vnet3Finger._d_parameterSave, "getCalibState": _0_VnetHand.vnet3Finger._d_getCalibState, "getCalibStateAll": _0_VnetHand.vnet3Finger._d_getCalibStateAll, "clearCanBuffer": _0_VnetHand.vnet3Finger._d_clearCanBuffer}

vnet3Finger._omni_skeleton = vnet3Finger
_0_VnetHand__POA.vnet3Finger = vnet3Finger
omniORB.registerSkeleton(vnet3Finger._NP_RepositoryId, vnet3Finger)
del vnet3Finger
__name__ = "VnetHand"

#
# End of module "VnetHand"
#
__name__ = "vnet3Finger_idl"

_exported_modules = ( "VnetHand", )

# The end.
