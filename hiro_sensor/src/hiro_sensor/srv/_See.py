"""autogenerated by genpy from hiro_sensor/SeeRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SeeRequest(genpy.Message):
  _md5sum = "bbe84daac54043cac37fe08e055733cf"
  _type = "hiro_sensor/SeeRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool rerun
string path
uint16 n_movable_object
uint16 n_vase
bool randomized_vase

"""
  __slots__ = ['rerun','path','n_movable_object','n_vase','randomized_vase']
  _slot_types = ['bool','string','uint16','uint16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rerun,path,n_movable_object,n_vase,randomized_vase

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SeeRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rerun is None:
        self.rerun = False
      if self.path is None:
        self.path = ''
      if self.n_movable_object is None:
        self.n_movable_object = 0
      if self.n_vase is None:
        self.n_vase = 0
      if self.randomized_vase is None:
        self.randomized_vase = False
    else:
      self.rerun = False
      self.path = ''
      self.n_movable_object = 0
      self.n_vase = 0
      self.randomized_vase = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.rerun))
      _x = self.path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2HB.pack(_x.n_movable_object, _x.n_vase, _x.randomized_vase))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.rerun,) = _struct_B.unpack(str[start:end])
      self.rerun = bool(self.rerun)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path = str[start:end].decode('utf-8')
      else:
        self.path = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.n_movable_object, _x.n_vase, _x.randomized_vase,) = _struct_2HB.unpack(str[start:end])
      self.randomized_vase = bool(self.randomized_vase)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.rerun))
      _x = self.path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2HB.pack(_x.n_movable_object, _x.n_vase, _x.randomized_vase))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.rerun,) = _struct_B.unpack(str[start:end])
      self.rerun = bool(self.rerun)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path = str[start:end].decode('utf-8')
      else:
        self.path = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.n_movable_object, _x.n_vase, _x.randomized_vase,) = _struct_2HB.unpack(str[start:end])
      self.randomized_vase = bool(self.randomized_vase)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_2HB = struct.Struct("<2HB")
"""autogenerated by genpy from hiro_sensor/SeeResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SeeResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "hiro_sensor/SeeResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SeeResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class See(object):
  _type          = 'hiro_sensor/See'
  _md5sum = 'bbe84daac54043cac37fe08e055733cf'
  _request_class  = SeeRequest
  _response_class = SeeResponse
