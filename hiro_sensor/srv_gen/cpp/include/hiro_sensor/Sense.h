/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/hiro_sensor/srv/Sense.srv */
#ifndef HIRO_SENSOR_SERVICE_SENSE_H
#define HIRO_SENSOR_SERVICE_SENSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hiro_sensor
{
template <class ContainerAllocator>
struct SenseRequest_ {
  typedef SenseRequest_<ContainerAllocator> Type;

  SenseRequest_()
  : sensor_type(0)
  {
  }

  SenseRequest_(const ContainerAllocator& _alloc)
  : sensor_type(0)
  {
  }

  typedef uint8_t _sensor_type_type;
  uint8_t sensor_type;


  typedef boost::shared_ptr< ::hiro_sensor::SenseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_sensor::SenseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SenseRequest
typedef  ::hiro_sensor::SenseRequest_<std::allocator<void> > SenseRequest;

typedef boost::shared_ptr< ::hiro_sensor::SenseRequest> SenseRequestPtr;
typedef boost::shared_ptr< ::hiro_sensor::SenseRequest const> SenseRequestConstPtr;


template <class ContainerAllocator>
struct SenseResponse_ {
  typedef SenseResponse_<ContainerAllocator> Type;

  SenseResponse_()
  : msg()
  {
  }

  SenseResponse_(const ContainerAllocator& _alloc)
  : msg(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hiro_sensor::SenseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_sensor::SenseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SenseResponse
typedef  ::hiro_sensor::SenseResponse_<std::allocator<void> > SenseResponse;

typedef boost::shared_ptr< ::hiro_sensor::SenseResponse> SenseResponsePtr;
typedef boost::shared_ptr< ::hiro_sensor::SenseResponse const> SenseResponseConstPtr;

struct Sense
{

typedef SenseRequest Request;
typedef SenseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Sense
} // namespace hiro_sensor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_sensor::SenseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_sensor::SenseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_sensor::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a091f0018185a6b2bef07abf15653631";
  }

  static const char* value(const  ::hiro_sensor::SenseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa091f0018185a6b2ULL;
  static const uint64_t static_value2 = 0xbef07abf15653631ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_sensor::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_sensor/SenseRequest";
  }

  static const char* value(const  ::hiro_sensor::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_sensor::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 sensor_type\n\
\n\
";
  }

  static const char* value(const  ::hiro_sensor::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_sensor::SenseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_sensor::SenseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_sensor::SenseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_sensor::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const  ::hiro_sensor::SenseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d96ed7307768047ULL;
  static const uint64_t static_value2 = 0x54140b85e64c862eULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_sensor::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_sensor/SenseResponse";
  }

  static const char* value(const  ::hiro_sensor::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_sensor::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_sensor::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_sensor::SenseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sensor_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SenseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_sensor::SenseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SenseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_sensor::Sense> {
  static const char* value() 
  {
    return "b8ffb43dc566d47d2b50541d67ff03ac";
  }

  static const char* value(const hiro_sensor::Sense&) { return value(); } 
};

template<>
struct DataType<hiro_sensor::Sense> {
  static const char* value() 
  {
    return "hiro_sensor/Sense";
  }

  static const char* value(const hiro_sensor::Sense&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_sensor::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b8ffb43dc566d47d2b50541d67ff03ac";
  }

  static const char* value(const hiro_sensor::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_sensor::SenseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_sensor/Sense";
  }

  static const char* value(const hiro_sensor::SenseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_sensor::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b8ffb43dc566d47d2b50541d67ff03ac";
  }

  static const char* value(const hiro_sensor::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_sensor::SenseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_sensor/Sense";
  }

  static const char* value(const hiro_sensor::SenseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_SENSOR_SERVICE_SENSE_H

