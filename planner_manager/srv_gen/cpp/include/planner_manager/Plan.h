/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/planner_manager/srv/Plan.srv */
#ifndef PLANNER_MANAGER_SERVICE_PLAN_H
#define PLANNER_MANAGER_SERVICE_PLAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace planner_manager
{
template <class ContainerAllocator>
struct PlanRequest_ {
  typedef PlanRequest_<ContainerAllocator> Type;

  PlanRequest_()
  {
  }

  PlanRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::planner_manager::PlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_manager::PlanRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanRequest
typedef  ::planner_manager::PlanRequest_<std::allocator<void> > PlanRequest;

typedef boost::shared_ptr< ::planner_manager::PlanRequest> PlanRequestPtr;
typedef boost::shared_ptr< ::planner_manager::PlanRequest const> PlanRequestConstPtr;


template <class ContainerAllocator>
struct PlanResponse_ {
  typedef PlanResponse_<ContainerAllocator> Type;

  PlanResponse_()
  {
  }

  PlanResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::planner_manager::PlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_manager::PlanResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanResponse
typedef  ::planner_manager::PlanResponse_<std::allocator<void> > PlanResponse;

typedef boost::shared_ptr< ::planner_manager::PlanResponse> PlanResponsePtr;
typedef boost::shared_ptr< ::planner_manager::PlanResponse const> PlanResponseConstPtr;

struct Plan
{

typedef PlanRequest Request;
typedef PlanResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Plan
} // namespace planner_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::planner_manager::PlanRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::planner_manager::PlanRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::planner_manager::PlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::planner_manager::PlanRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_manager::PlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "planner_manager/PlanRequest";
  }

  static const char* value(const  ::planner_manager::PlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::planner_manager::PlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::planner_manager::PlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::planner_manager::PlanRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::planner_manager::PlanResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::planner_manager::PlanResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::planner_manager::PlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::planner_manager::PlanResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_manager::PlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "planner_manager/PlanResponse";
  }

  static const char* value(const  ::planner_manager::PlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::planner_manager::PlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::planner_manager::PlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::planner_manager::PlanResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::planner_manager::PlanRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::planner_manager::PlanResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<planner_manager::Plan> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const planner_manager::Plan&) { return value(); } 
};

template<>
struct DataType<planner_manager::Plan> {
  static const char* value() 
  {
    return "planner_manager/Plan";
  }

  static const char* value(const planner_manager::Plan&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<planner_manager::PlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const planner_manager::PlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<planner_manager::PlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "planner_manager/Plan";
  }

  static const char* value(const planner_manager::PlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<planner_manager::PlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const planner_manager::PlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<planner_manager::PlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "planner_manager/Plan";
  }

  static const char* value(const planner_manager::PlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PLANNER_MANAGER_SERVICE_PLAN_H

