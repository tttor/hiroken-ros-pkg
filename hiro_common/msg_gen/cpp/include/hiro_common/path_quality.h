/* Auto-generated by genmsg_cpp for file /home/vektor/4/ros-pkg/hiro_common/msg/path_quality.msg */
#ifndef HIRO_COMMON_MESSAGE_PATH_QUALITY_H
#define HIRO_COMMON_MESSAGE_PATH_QUALITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hiro_common
{
template <class ContainerAllocator>
struct path_quality_ {
  typedef path_quality_<ContainerAllocator> Type;

  path_quality_()
  : length(0.0)
  , smoothness(0.0)
  {
  }

  path_quality_(const ContainerAllocator& _alloc)
  : length(0.0)
  , smoothness(0.0)
  {
  }

  typedef double _length_type;
  double length;

  typedef double _smoothness_type;
  double smoothness;


  typedef boost::shared_ptr< ::hiro_common::path_quality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_common::path_quality_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct path_quality
typedef  ::hiro_common::path_quality_<std::allocator<void> > path_quality;

typedef boost::shared_ptr< ::hiro_common::path_quality> path_qualityPtr;
typedef boost::shared_ptr< ::hiro_common::path_quality const> path_qualityConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hiro_common::path_quality_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hiro_common::path_quality_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hiro_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_common::path_quality_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_common::path_quality_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_common::path_quality_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75a4d7ec806b8bbee52e2ce9b2d1ee1e";
  }

  static const char* value(const  ::hiro_common::path_quality_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x75a4d7ec806b8bbeULL;
  static const uint64_t static_value2 = 0xe52e2ce9b2d1ee1eULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_common::path_quality_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/path_quality";
  }

  static const char* value(const  ::hiro_common::path_quality_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_common::path_quality_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 length\n\
float64 smoothness\n\
\n\
";
  }

  static const char* value(const  ::hiro_common::path_quality_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_common::path_quality_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_common::path_quality_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.length);
    stream.next(m.smoothness);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct path_quality_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiro_common::path_quality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hiro_common::path_quality_<ContainerAllocator> & v) 
  {
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "smoothness: ";
    Printer<double>::stream(s, indent + "  ", v.smoothness);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HIRO_COMMON_MESSAGE_PATH_QUALITY_H

