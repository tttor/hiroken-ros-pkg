/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/hiro_common/srv/BenchmarkPath.srv */
#ifndef HIRO_COMMON_SERVICE_BENCHMARKPATH_H
#define HIRO_COMMON_SERVICE_BENCHMARKPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "trajectory_msgs/JointTrajectory.h"



namespace hiro_common
{
template <class ContainerAllocator>
struct BenchmarkPathRequest_ {
  typedef BenchmarkPathRequest_<ContainerAllocator> Type;

  BenchmarkPathRequest_()
  : trajectory()
  {
  }

  BenchmarkPathRequest_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
   ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  trajectory;


  typedef boost::shared_ptr< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BenchmarkPathRequest
typedef  ::hiro_common::BenchmarkPathRequest_<std::allocator<void> > BenchmarkPathRequest;

typedef boost::shared_ptr< ::hiro_common::BenchmarkPathRequest> BenchmarkPathRequestPtr;
typedef boost::shared_ptr< ::hiro_common::BenchmarkPathRequest const> BenchmarkPathRequestConstPtr;


template <class ContainerAllocator>
struct BenchmarkPathResponse_ {
  typedef BenchmarkPathResponse_<ContainerAllocator> Type;

  BenchmarkPathResponse_()
  : length(0.0)
  {
  }

  BenchmarkPathResponse_(const ContainerAllocator& _alloc)
  : length(0.0)
  {
  }

  typedef double _length_type;
  double length;


  typedef boost::shared_ptr< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BenchmarkPathResponse
typedef  ::hiro_common::BenchmarkPathResponse_<std::allocator<void> > BenchmarkPathResponse;

typedef boost::shared_ptr< ::hiro_common::BenchmarkPathResponse> BenchmarkPathResponsePtr;
typedef boost::shared_ptr< ::hiro_common::BenchmarkPathResponse const> BenchmarkPathResponseConstPtr;

struct BenchmarkPath
{

typedef BenchmarkPathRequest Request;
typedef BenchmarkPathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BenchmarkPath
} // namespace hiro_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48a668811b715b51af6b3383511ae27f";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x48a668811b715b51ULL;
  static const uint64_t static_value2 = 0xaf6b3383511ae27fULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/BenchmarkPathRequest";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a67ae5be9f180b7bd9038cd515fe45c1";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa67ae5be9f180b7bULL;
  static const uint64_t static_value2 = 0xd9038cd515fe45c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/BenchmarkPathResponse";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 length\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_common::BenchmarkPathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BenchmarkPathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_common::BenchmarkPathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.length);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BenchmarkPathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_common::BenchmarkPath> {
  static const char* value() 
  {
    return "95fba3013376c1da22380f08a8f4052b";
  }

  static const char* value(const hiro_common::BenchmarkPath&) { return value(); } 
};

template<>
struct DataType<hiro_common::BenchmarkPath> {
  static const char* value() 
  {
    return "hiro_common/BenchmarkPath";
  }

  static const char* value(const hiro_common::BenchmarkPath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_common::BenchmarkPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95fba3013376c1da22380f08a8f4052b";
  }

  static const char* value(const hiro_common::BenchmarkPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_common::BenchmarkPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/BenchmarkPath";
  }

  static const char* value(const hiro_common::BenchmarkPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_common::BenchmarkPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95fba3013376c1da22380f08a8f4052b";
  }

  static const char* value(const hiro_common::BenchmarkPathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_common::BenchmarkPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/BenchmarkPath";
  }

  static const char* value(const hiro_common::BenchmarkPathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_COMMON_SERVICE_BENCHMARKPATH_H

