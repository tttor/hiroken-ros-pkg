/* Auto-generated by genmsg_cpp for file /home/vektor/hiroken-ros-pkg/hiro_common/srv/GetManipulability.srv */
#ifndef HIRO_COMMON_SERVICE_GETMANIPULABILITY_H
#define HIRO_COMMON_SERVICE_GETMANIPULABILITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/JointState.h"



namespace hiro_common
{
template <class ContainerAllocator>
struct GetManipulabilityRequest_ {
  typedef GetManipulabilityRequest_<ContainerAllocator> Type;

  GetManipulabilityRequest_()
  : jstate()
  , jspace()
  {
  }

  GetManipulabilityRequest_(const ContainerAllocator& _alloc)
  : jstate(_alloc)
  , jspace(_alloc)
  {
  }

  typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _jstate_type;
   ::sensor_msgs::JointState_<ContainerAllocator>  jstate;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _jspace_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  jspace;


  typedef boost::shared_ptr< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetManipulabilityRequest
typedef  ::hiro_common::GetManipulabilityRequest_<std::allocator<void> > GetManipulabilityRequest;

typedef boost::shared_ptr< ::hiro_common::GetManipulabilityRequest> GetManipulabilityRequestPtr;
typedef boost::shared_ptr< ::hiro_common::GetManipulabilityRequest const> GetManipulabilityRequestConstPtr;


template <class ContainerAllocator>
struct GetManipulabilityResponse_ {
  typedef GetManipulabilityResponse_<ContainerAllocator> Type;

  GetManipulabilityResponse_()
  : m(0.0)
  {
  }

  GetManipulabilityResponse_(const ContainerAllocator& _alloc)
  : m(0.0)
  {
  }

  typedef double _m_type;
  double m;


  typedef boost::shared_ptr< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetManipulabilityResponse
typedef  ::hiro_common::GetManipulabilityResponse_<std::allocator<void> > GetManipulabilityResponse;

typedef boost::shared_ptr< ::hiro_common::GetManipulabilityResponse> GetManipulabilityResponsePtr;
typedef boost::shared_ptr< ::hiro_common::GetManipulabilityResponse const> GetManipulabilityResponseConstPtr;

struct GetManipulability
{

typedef GetManipulabilityRequest Request;
typedef GetManipulabilityResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetManipulability
} // namespace hiro_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5fe01e815405a831fcaf798e4d14fd6";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5fe01e815405a83ULL;
  static const uint64_t static_value2 = 0x1fcaf798e4d14fd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/GetManipulabilityRequest";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/JointState jstate\n\
string jspace\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f7e8c80a067dc35309bd10175140b312";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf7e8c80a067dc353ULL;
  static const uint64_t static_value2 = 0x09bd10175140b312ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/GetManipulabilityResponse";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 m\n\
\n\
\n\
";
  }

  static const char* value(const  ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_common::GetManipulabilityRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jstate);
    stream.next(m.jspace);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetManipulabilityRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hiro_common::GetManipulabilityResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.m);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetManipulabilityResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hiro_common::GetManipulability> {
  static const char* value() 
  {
    return "c55e73d3b1934abd866df4c7652e9c73";
  }

  static const char* value(const hiro_common::GetManipulability&) { return value(); } 
};

template<>
struct DataType<hiro_common::GetManipulability> {
  static const char* value() 
  {
    return "hiro_common/GetManipulability";
  }

  static const char* value(const hiro_common::GetManipulability&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_common::GetManipulabilityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c55e73d3b1934abd866df4c7652e9c73";
  }

  static const char* value(const hiro_common::GetManipulabilityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_common::GetManipulabilityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/GetManipulability";
  }

  static const char* value(const hiro_common::GetManipulabilityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hiro_common::GetManipulabilityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c55e73d3b1934abd866df4c7652e9c73";
  }

  static const char* value(const hiro_common::GetManipulabilityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hiro_common::GetManipulabilityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hiro_common/GetManipulability";
  }

  static const char* value(const hiro_common::GetManipulabilityResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HIRO_COMMON_SERVICE_GETMANIPULABILITY_H

